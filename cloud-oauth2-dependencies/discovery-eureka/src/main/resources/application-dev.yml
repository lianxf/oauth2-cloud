server:
  port: 8761
eureka:
  server:
   # 是否开启自我保护
    enableSelfPreservation: false
#    # 自我保护续约百分比阀值因子。如果实际续约数小于续约数阀值，则开启自我保护
#    renewalPercentThreshold: 0.85
#    # 续约数阀值更新频率
#    renewalThresholdUpdateIntervalMs: 900000
#    # Eureka Server节点更新频率
#    peerEurekaNodesUpdateIntervalMs: 600000
#    # 是否启用复制请求压缩
#    enableReplicatedRequestCompression: false
#    # 当从其他节点同步实例信息为空时等待的时间
#    waitTimeInMsWhenSyncEmpty: 300000
#    # 节点间连接的超时时间
#    peerNodeConnectTimeoutMs: 200
#    # 节点间读取信息的超时时间
#    peerNodeReadTimeoutMs: 200
#    # 节点间连接总数
#    peerNodeTotalConnections: 1000
#    # 单个节点间连接总数
#    peerNodeTotalConnectionsPerHost: 500
#    # 节点间连接空闲超时时间
#    peerNodeConnectionIdleTimeoutSeconds: 30
#    # 增量队列的缓存时间
#    retentionTimeInMSInDeltaQueue: 3
#    # 清理增量队列中过期的频率
#    deltaRetentionTimerIntervalInMs: 30000
#    # 剔除任务频率
#    evictionIntervalTimerInMs: 60000
#    # 注册列表缓存超时时间（当注册列表没有变化时）
#    responseCacheAutoExpirationInSeconds: 180
#    # 注册列表缓存更新频率
#    responseCacheUpdateIntervalMs: 300000
#    # 是否开启注册列表的二级缓存
#    useReadOnlyResponseCache: true
#    # 是否为client提供增量信息
#    disableDelta: false
#    # 状态同步的最大线程数
#    maxThreadsForStatusReplication: 1
#    # 状态同步队列的最大容量
#    maxElementsInStatusReplicationPool: 10000
#    # 当时间差异时是否同步
#    syncWhenTimestampDiffers: true
#    # 注册信息同步重试次数
#    registrySyncRetries: 0
#    # 注册信息同步重试期间的时间间隔
#    registrySyncRetryWaitMs: 300000
#    # 节点间同步事件的最大容量
#    maxElementsInPeerReplicationPool: 10000
#    # 节点间同步的最小线程数
#    minThreadsForPeerReplication: 5
#    # 节点间同步的最大线程数
#    maxThreadsForPeerReplication: 20
#    # 节点间同步的最大时间，单位为毫秒
#    maxTimeForReplication: 30000
#    # 是否启用远程区域增量
#    disableDeltaForRemoteRegions: false
#    # 远程区域连接超时时间
#    remoteRegionConnectTimeoutMs: 1000
#    # 远程区域读取超时时间
#    remoteRegionReadTimeoutMs: 1000
#    # 远程区域最大连接数
#    remoteRegionTotalConnections: 1000
#    # 远程区域单机连接数
#    remoteRegionTotalConnectionsPerHost: 500
#    # 远程区域连接空闲超时时间
#    remoteRegionConnectionIdleTimeoutSeconds: 30
#    # 远程区域注册信息拉取频率
#    remoteRegionRegistryFetchInterval: 30
#    # 远程区域注册信息线程数
#    remoteRegionFetchThreadPoolSize: 20
  instance:
    hostname: localhost
    preferIpAddress: true
#    # 应用名，首先获取spring.application.name的值，如果取值为空，则取默认unknown
#    appname: unknown
#    # 应用组名
#    appGroupName: null
#    # 实例注册到Eureka上是，是否立刻开启通讯。有时候应用在准备好服务之前需要一些预处理
#    instanceEnabledOnit: false
#    # 非安全的端口
#    nonSecurePort: 80
#    # 安全端口
#    securePort: 443
#    # 是否开启非安全端口通讯
#    nonSecurePortEnabled: true
#    # 是否开启安全端口通讯
#    securePortEnabled: false
#    # 实例续约间隔时间
#    leaseRenewalIntervalInSeconds: 30
#    # 实例超时时间，表示最大leaseExpirationDurationInSeconds秒后没有续约，Server就认为他不可用了，随之就会将其剔除
#    leaseExpirationDurationInSeconds: 90
#    # 虚拟主机名，首先获取spring.application.name的值，如果取值为空，则取默认unknown
#    virtualHostName: unknown
#    # 注册到eureka上的唯一实例ID，不能与相同appname的其他实例重复
#    instanceId
#    # 安全虚拟主机名，首先获取spring.application.name的值，如果取值为空，则取默认unknown
#    secureVirtualHostName: unknown
#    # 实例元数据，可以供其他实例使用。比如spring-boot-admin在监控时，获取实例的上下文和端口
#    metadataMap: new HashMap();
#    # 实例部署的数据中心。如AWS、MyOwn
#    dataCenterInfo: new MyDataCenterInfo(DataCenterInfo.Name.MyOwn);
#    # 实例的IP地址
#    ipAddress=null
#    # 实例状态页相对url
#    statusPageUrlPath: "/actuator/info"
#    # 实例状态页绝对URL
#    statusPageUrl: null
#    # 实例主页相对URL
#    homePageUrlPath: "/"
#    # 实例主页绝对URL
#    homePageUrl: null
#    # 实例健康检查相对URL
#    healthCheckUrlUrlPath: "/actuator/health"
#    # 实例健康检查绝对URL
#    healthCheckUrl: null
#    # 实例安全的健康检查绝对URL
#    secureHealthCheckUrl: null
#    # 配置属性的命名空间（Spring Cloud中被忽略）
#    namespace: "eureka"
#   # 主机名,不配置的时候讲根据操作系统的主机名来获取
#    hostname: null
#    # 是否优先使用IP地址作为主机名的标识
#    preferIpAddress: false
  client:
    registerWithEureka: false
    fetchRegistry: false
    service-url:
          defaultZone: http://admin:admin@${eureka.instance.hostname}:${server.port}/eureka/
#   # 是否启用Eureka client
#    enabled: true
#    # 定时从Eureka Server拉取服务注册信息的间隔时间
#    registryFetchIntervalSeconds: 30
#    # 定时将实例信息（如果变化了）复制到Eureka Server的间隔时间。（InstanceInfoReplicator线程）
#    instanceInfoReplicationIntervalSeconds: 30
#    # 首次将实例信息复制到Eureka Server的延迟时间。（InstanceInfoReplicator线程）
#    initialInstanceInfoReplicationIntervalSeconds: 40
#    # 拉取Eureka Server地址的间隔时间（Eureka Server有可能增减）
#    eurekaServiceUrlPollIntervalSeconds: 300
#    # Eureka Server的代理端口
#    proxyPort: null
#    # Eureka Server的代理主机名
#    proxyHost: null
#    # Eureka Server的代理用户名
#    proxyUserName: null
#    # Eureka Server的代理密码
#    proxyPassword: null
#    # 从Eureka Server读取信息的超时时间
#    eurekaServerReadTimeoutSeconds: 8
#    # 连接Eureka Server的超时时间
#    eurekaServerConnectTimeoutSeconds: 5
#    # Eureka Client第一次启动时获取服务注册信息的调用的回溯实现。Eureka Client启动时首次会检查有没有BackupRegistry的实现类，如果有实现类，则优先从这个实现类里获取服务注册信息
#    backupRegistryImpl: null
#    # Eureka client连接Eureka Server的链接总数
#    eurekaServerTotalConnections: 200
#    # Eureka client连接单台Eureka Server的链接总数
#    eurekaServerTotalConnectionsPerHost: 50
#    # 当Eureka server的列表在DNS中时，Eureka Server的上下文路径。如http://xxxx/eureka
#    eurekaServerURLContext: null
#    # 当Eureka server的列表在DNS中时，Eureka Server的端口
#    eurekaServerPort: null
#    # 当Eureka server的列表在DNS中时，且要通过DNSName获取Eureka Server列表时，DNS名字
#    eurekaServerDNSName: null
#    # 实例所属区域
#    region: "us-east-1"
#    # Eureka Client和Eureka Server之间的Http连接的空闲超时时间
#    eurekaConnectionIdleTimeoutSeconds: 30
#    # 心跳（续约）执行器线程池大小
#    heartbeatExecutorThreadPoolSize: 2
#    # 心跳执行器在续约过程中超时后的再次执行续约的最大延迟倍数。默认最大延迟时间: 10 * eureka.instance.leaseRenewalIntervalInSeconds
#    heartbeatExecutorExponentialBackOffBound: 10
#    # cacheRefreshExecutord的线程池大小（获取注册信息）
#    cacheRefreshExecutorThreadPoolSize: 2
#    # cacheRefreshExecutord的再次执行的最大延迟倍数。默认最大延迟时间: 10 *eureka.client.registryFetchIntervalSeconds
#    cacheRefreshExecutorExponentialBackOffBound: 10
#    # Eureka Server的分区地址。默认添加了一个defualtZone。也就是最常用的配置eureka.client.service-url.defaultZone: xxx
#    serviceUrl:  new HashMap();serviceUrl.put(DEFAULT_ZONE, DEFAULT_URL);
#    # 是否注册到Eureka Server
#    registerWithEureka: true
#    # 是否使用相同Zone下的Eureka server
#    preferSameZoneEureka: true
#    # 是否记录Eureka Server和Eureka Client之间注册信息的差异
#    logDeltaDiff: false
#    # 是否开启增量同步注册信息
#    disableDelta: false
#    # 获取注册服务的远程地区，以逗号隔开
#    fetchRemoteRegionsRegistry: null
#    # 可用分区列表。用逗号隔开
#    availabilityZones: new HashMap()
#    # 是否只拉取UP状态的实例
#    filterOnlyUpInstances: true
#    # 是否拉取注册信息
#    fetchRegistry: true
#    # 是否在停止服务的时候向Eureka Server发起Cancel指令
#    shouldUnregisterOnShutdown: true
#    # 是否在初始化过程中注册服务
#    shouldEnforceRegistrationAtInit: false